import os
import re
import requests
import time
from datetime import datetime
from config import FRAME_CONFIGS

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
FIGMA_TOKEN = os.getenv("FIGMA_TOKEN")
TELEGRAM_BOT_TOKEN = os.getenv("BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("CHANNEL_ID")

HISTORY_DIR = "history"
os.makedirs(HISTORY_DIR, exist_ok=True)

def sanitize_filename(filename):
    """–ó–∞–º–µ–Ω—è–µ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∞—Ö —Ñ–∞–π–ª–æ–≤"""
    return re.sub(r'[:]', '_', filename)

def get_frame_text(file_id, node_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ Figma —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    url = f"https://api.figma.com/v1/files/{file_id}/nodes?ids={node_id}"
    headers = {"X-Figma-Token": FIGMA_TOKEN}
    
    try:
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        data = response.json()
        node = data["nodes"][node_id]["document"]
        return extract_text_preserve_structure(node)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è {file_id}:{node_id} - {str(e)}")
        return ""

def extract_text_preserve_structure(node):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–æ–∫"""
    text = ""
    
    if node.get("type") == "TEXT" and "characters" in node:
        text += node["characters"] + "\n"
    
    if "children" in node:
        for child in node["children"]:
            text += extract_text_preserve_structure(child)
    
    return text

def get_last_text(frame_id):
    safe_filename = sanitize_filename(frame_id)
    filepath = f"{HISTORY_DIR}/{safe_filename}.txt"
    if os.path.exists(filepath):
        with open(filepath, 'r', encoding='utf-8') as f:
            return f.read()
    return ""

def save_last_text(frame_id, text):
    safe_filename = sanitize_filename(frame_id)
    filepath = f"{HISTORY_DIR}/{safe_filename}.txt"
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(text)

def find_new_entries(old_text, new_text):
    """–ù–∞—Ö–æ–¥–∏—Ç –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –ø–æ –¥–∞—Ç–∞–º"""
    if not old_text:
        return new_text
    
    old_entries = split_into_entries(old_text)
    new_entries = split_into_entries(new_text)
    
    added_entries = []
    for date, entries in new_entries.items():
        if date not in old_entries:
            added_entries.append((date, entries))
        else:
            new_items = [e for e in entries if e not in old_entries[date]]
            if new_items:
                added_entries.append((date, new_items))
    
    return added_entries

def split_into_entries(text):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∑–∞–ø–∏—Å–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–∞–º"""
    entries = {}
    current_date = None
    current_items = []
    
    for line in text.splitlines():
        line = line.strip()
        if not line:
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –¥–∞—Ç–æ–π
        if any(month in line.lower() for month in ["—è–Ω–≤", "—Ñ–µ–≤", "–º–∞—Ä", "–∞–ø—Ä", "–º–∞–π", "–∏—é–Ω", 
                                                "–∏—é–ª", "–∞–≤–≥", "—Å–µ–Ω", "–æ–∫—Ç", "–Ω–æ—è", "–¥–µ–∫"]):
            if current_date:
                entries[current_date] = current_items
            current_date = line
            current_items = []
        else:
            current_items.append(line)
    
    if current_date:
        entries[current_date] = current_items
    
    return entries

def format_entries(title, entries):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å–∏ –¥–ª—è Telegram"""
    if not entries:
        return ""
    
    message = f"<b>üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ {title}</b>\n\n"
    
    for date, items in entries:
        message += f"<b>{date}</b>\n"
        for item in items:
            message += f"{item}\n"
        message += "\n"
    
    return message.strip()

def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    if not message or not message.strip():
        return False
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message,
        "parse_mode": "HTML"
    }
    
    try:
        response = requests.post(url, data=data, timeout=10)
        if response.status_code == 200:
            return True
        print(f"[ERROR] Telegram API: {response.status_code}, {response.text}")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
    
    return False

def process_frame(config):
    frame_id = f"{config['file_id']}_{config['node_id']}"
    print(f"\n[INFO] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–µ–π–º–∞: {config['title']}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç
    current_text = get_frame_text(config["file_id"], config["node_id"])
    if not current_text:
        print("[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ Figma")
        return
    
    print("[DEBUG] –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∏–∑ Figma:")
    print(current_text)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–µ—Ä—Å–∏—é
    last_text = get_last_text(frame_id)
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
    new_entries = find_new_entries(last_text, current_text)
    
    if new_entries:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = format_entries(config["title"], new_entries)
        print("[DEBUG] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        print(message)
        
        if send_telegram_message(message):
            print("[SUCCESS] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            print("[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
        save_last_text(frame_id, current_text)
    else:
        print("[INFO] –ù–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

def main():
    print(f"\n=== –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ===")
    
    for config in FRAME_CONFIGS:
        try:
            process_frame(config)
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {config['title']}: {str(e)}")
    
    print("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")

if __name__ == "__main__":
    main()